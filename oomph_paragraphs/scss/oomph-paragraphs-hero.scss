@import "oomph-paragraphs-setup";


// Magic happens here via the power of CSS variables
// The goal: preserve the natural aspect ratio of the image uploaded
//
// A CSS variable is set in the markup. That variable helps calculate the height of the container


// 1. Undo the position absolute centering, as it was not exact enough (left a
//    gap under the container). Since the width and height should be exact for
//    modern browsers, reset the position to be top left 0.
// 2. Support IE 11 and possibly older
//    IE11 does NOT like percentage-based heights, but likes 100vw and calc() just fine
// 3. Assumes a 16/9 aspect ratio (dangerous assumption perhaps)
// 4. Go the extra mile and make wide viewports crop the image more with 21:9
// 5. Modern Browsers that support css variables
// 6. Use calc() to read in the dynamic inline style variable

.oomph-aspect-ratio {

  .oomph-background-image__wrapper { // 1.
    top: 0;
    left: 0;
    transform: none;
  }

  @include media-breakpoint-up(sm) { // 2.
    width: 100%;
    padding-bottom: (9/16 * 100%); // 3.
  }

  @include media-breakpoint-up(lg) { // 2.
    padding-bottom: (9/21 * 100%); // 4.
  }

  @supports (color: var(--blue)) { // 5.

    @include media-breakpoint-up(sm) {
      padding-bottom: calc(var(--aspect-ratio) * 100%); // 6.
    }
  }
}


// Alignment works via absolute positioning here
.oomph-paragraph__type--hero {

  .oomph-paragraph__component {
    position: absolute;

    .text-formatted {
      // Also, while we are here, remove spacing from interior elements
      *:first-child {
        margin-top: 0 !important;
      }
    }
  }

  // Vertical axis
  &.flex-align-start .oomph-paragraph__component {
    top: 0;
  }

  &.flex-align-center .oomph-paragraph__component {
    top: 50%;
    transform: translateY(-50%);
  }

  &.flex-align-end .oomph-paragraph__component {
    bottom: 0;
  }
}
