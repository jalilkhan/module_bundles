{#
/**
 * @file
 * Default theme implementation to display a paragraph HERO.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('oomph_paragraphs/hero') }}

{% if paragraph.field_hero_background_image.value|length > 0 %}
  {% set aspect_ratio_style = 'style=--aspect-ratio:' ~ paragraph.field_hero_background_image.0.height ~ '/' ~ paragraph.field_hero_background_image.0.width ~ ';' %}
{% endif %}
{% if paragraph.field_background_color.value|length > 0 %}
  {% set background_color_style = ' ' ~ paragraph.field_background_color.value|clean_class %}
{% endif %}
{% if paragraph.field_animation.value is not empty %}
  {% set animated_class_string = ' oomph-animated oomph-animated__initial ' ~ paragraph.field_animation.value|clean_class %}
{% endif %}

{%
  set classes = [
    'oomph-paragraph',
    'oomph-paragraph__type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'oomph-paragraph__view-mode--' ~ view_mode|clean_class,
    paragraph.field_vertical_alignment.value ? paragraph.field_vertical_alignment.value|clean_class,
    paragraph.field_horizontal_alignment.value ? paragraph.field_horizontal_alignment.value|clean_class,
    paragraph.field_hero_layout.value ? 'oomph-layout--' ~ paragraph.field_hero_layout.value|clean_class,
    paragraph.field_custom_css_class.value ? paragraph.field_custom_css_class.value
  ]
%}
{% block paragraph_hero %}
  <div{{ attributes.addClass(classes) }}>
    {% block hero_background_image %}
      <div class="oomph-background-image__mask oomph-aspect-ratio" {{ aspect_ratio_style }}>
      <figure class="oomph-background-image__wrapper">
        {{ content.field_hero_background_image }}
      </figure>
    {% endblock hero_background_image %}
    {% block hero_content %}
      <div class="oomph-paragraph__component{{ background_color_style }}{{ animated_class_string }}">
        {{ content.field_hero_text }}
      </div>
    {% endblock hero_content %}
  </div>
{% endblock paragraph_hero %}
